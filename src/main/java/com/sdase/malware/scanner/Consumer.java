package com.sdase.malware.scanner;

import com.sdase.malware.scanner.streaming.model.CheckEvent;

import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Consumer {

    private static String FILE_URL;

    public static void recieveMessage(String topicName) throws IOException {

        CheckEvent checkEvent= new CheckEvent();

        final Logger logger = LoggerFactory.getLogger(Consumer.class);
        final String bootstrapServers = "127.0.0.1:9092";
        final String consumerGroupID = "java-group-consumer";
        String FILE_NAME = "Test.pdf";


        Properties p = new Properties();
        p.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrapServers);
        p.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        p.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,StringDeserializer.class.getName());
        p.setProperty(ConsumerConfig.GROUP_ID_CONFIG,consumerGroupID);
        //p.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");

        final KafkaConsumer<String,String> consumer =new  KafkaConsumer<>(p);
        consumer.subscribe(Arrays.asList(topicName));

        while(true){
           ConsumerRecords<String,String> records = consumer.poll(Duration.ofMillis(1000));
           for (ConsumerRecord record :records){
              logger.info("Recieved new record:\n"+
              "key: "+ record.key()+","+
              "Value:"+record.value()+","+
              "Partition:"+record.partition()+","+
              "Offset:"+record.offset()+"\n");

               checkEvent.setUrl(record.value().toString());
               FILE_URL= checkEvent.getUrl();
               downloadFileFromUrl(FILE_NAME,FILE_URL);
               readPDF();
           }

        }


    }

    //Download Pdf from the url consumed from topic
    public static void downloadFileFromUrl(String fileName, String fileUrl)
            throws MalformedURLException, IOException {
        System.out.println("opening connection");
        URL url = new URL(fileUrl);
        HttpURLConnection httpURLConnection =  (HttpURLConnection)  url.openConnection();
        httpURLConnection.setRequestMethod("GET");
        httpURLConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.13) Gecko/2009073021 Firefox/3.0.13");
        httpURLConnection.connect();
        InputStream inputStream = url.openStream();
        FileOutputStream fileOutputStream = new FileOutputStream(new File(fileName));

        System.out.println("Downloading from URL and writing to file...");

        int length = -1;
        byte[] buffer = new byte[1024];
        while ((length = inputStream.read(buffer)) > -1) {
            fileOutputStream.write(buffer, 0, length);
        }
        fileOutputStream.close();
        inputStream.close();

        System.out.println("File downloaded");
    }


    //Reading pdf and converting to raw text for details extraction
    public static void readPDF() throws IOException {
        File file = new File("Testdaten_Rechnungseinreichung.pdf");
        FileInputStream fileInputStream = new FileInputStream(file);
        PDDocument pdfDocument = PDDocument.load(fileInputStream);

        System.out.println("Number of Pages: " +pdfDocument.getPages().getCount());

        PDFTextStripper pdfTextStripper = new PDFTextStripper();

        String TextDocument = pdfTextStripper.getText(pdfDocument);

        PerformCheck performCheck = new PerformCheck(TextDocument);
        performCheck.checkIBAN();
        pdfDocument.close();
        fileInputStream.close();
    }
}
